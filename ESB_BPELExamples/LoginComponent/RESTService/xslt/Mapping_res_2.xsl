<?xml version="1.0" encoding="UTF-8"?>
<!-- @generated mapFile="xslt/Mapping_res_2.map" md5sum="5e1480c2db0d004f6c86698edd791259" version="8.0.200" -->
<!--
*****************************************************************************
*   This file has been generated by the IBM XML Mapping Editor.
*
*   Mapping file:		Mapping_res_2.map
*   Map declaration(s):	Mapping_res_2
*   Input file(s):		smo://smo/name%3Dwsdl-primary/message%3D%257Bhttp%253A%252F%252FRESTService%252FHelloWorldRef%257DhelloWorldResponseMsg/xpath%3D%252F/smo.xsd
*   Output file(s):		smo://smo/name%3Dwsdl-primary/message%3D%257Bhttp%253A%252F%252FRESTService%252FHelloWorldInterface%257DhelloWorldResponseMsg/xpath%3D%252F/smo.xsd
*
*   Note: Do not modify the contents of this file as it is overwritten
*         each time the mapping model is updated.
*****************************************************************************
-->
<xsl:stylesheet
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:xalan="http://xml.apache.org/xslt"
    xmlns:str="http://exslt.org/strings"
    xmlns:set="http://exslt.org/sets"
    xmlns:math="http://exslt.org/math"
    xmlns:exsl="http://exslt.org/common"
    xmlns:date="http://exslt.org/dates-and-times"
    xmlns:in="http://RESTService/HelloWorldRef"
    xmlns:in2="wsdl.http://RESTService/HelloWorldRef"
    xmlns:io="http://www.w3.org/2003/05/soap-envelope"
    xmlns:out="wsdl.http://RESTService/HelloWorldInterface"
    xmlns:io3="http://www.ibm.com/xmlns/prod/websphere/mq/sca/6.0.0"
    xmlns:io2="http://www.ibm.com/websphere/sibx/smo/v6.0.1"
    xmlns:io4="http://schemas.xmlsoap.org/ws/2004/08/addressing"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:io5="http://www.ibm.com/xmlns/prod/websphere/http/sca/6.1.0"
    xmlns:out2="http://RESTService/HelloWorldInterface"
    xmlns:xs4xs="http://www.w3.org/2001/XMLSchema"
    xmlns:io6="http://www.w3.org/2005/08/addressing"
    xmlns:map="http://RESTService/xslt/Mapping_res_2"
    xmlns:msl="http://www.ibm.com/xmlmap"
    exclude-result-prefixes="in in2 str set math exsl date map xalan msl"
    version="1.0">
  <xsl:output method="xml" encoding="UTF-8" indent="no"/>

  <!-- root wrapper template  -->
  <xsl:template match="/">
    <xsl:choose>
      <xsl:when test="msl:datamap">
        <msl:datamap>
          <xsl:element name="dataObject">
            <xsl:attribute name="xsi:type">
              <xsl:value-of select="'io2:ServiceMessageObject'"/>
            </xsl:attribute>
            <xsl:call-template name="map:Mapping_res_22">
              <xsl:with-param name="smo" select="msl:datamap/dataObject[1]"/>
            </xsl:call-template>
          </xsl:element>
        </msl:datamap>
      </xsl:when>
      <xsl:otherwise>
        <xsl:apply-templates select="io2:smo" mode="map:Mapping_res_2"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <!-- This rule represents an element mapping: "io2:smo" to "io2:smo".  -->
  <xsl:template match="io2:smo"  mode="map:Mapping_res_2">
    <io2:smo>
      <!-- a structural mapping: "headers"(HeadersType) to "headers"(HeadersType) -->
      <xsl:copy-of select="headers"/>
      <body>
        <xsl:attribute name="xsi:type">
          <xsl:value-of select="'out:helloWorldResponseMsg'"/>
        </xsl:attribute>
        <out2:helloWorldResponse>
          <!-- a simple data mapping: "body/in:helloWorldResponse/response"(string) to "response"(string) -->
          <xsl:choose>
            <xsl:when test="normalize-space(body/in:helloWorldResponse/response)">
              <xsl:element name="response">
                <xsl:value-of select="body/in:helloWorldResponse/response"/>
              </xsl:element>
            </xsl:when>
            <xsl:otherwise>
              <response xsi:nil="true"/>
            </xsl:otherwise>
          </xsl:choose>
        </out2:helloWorldResponse>
      </body>
    </io2:smo>
  </xsl:template>

  <!-- This rule represents a type mapping: "io2:smo" to "io2:smo".  -->
  <xsl:template name="map:Mapping_res_22">
    <xsl:param name="smo"/>
    <!-- a structural mapping: "$smo/headers"(HeadersType) to "headers"(HeadersType) -->
    <xsl:copy-of select="$smo/headers"/>
    <body>
      <xsl:attribute name="xsi:type">
        <xsl:value-of select="'out:helloWorldResponseMsg'"/>
      </xsl:attribute>
      <out2:helloWorldResponse>
        <!-- a simple data mapping: "$smo/body/in:helloWorldResponse/response"(string) to "response"(string) -->
        <xsl:choose>
          <xsl:when test="normalize-space($smo/body/in:helloWorldResponse/response)">
            <xsl:element name="response">
              <xsl:value-of select="$smo/body/in:helloWorldResponse/response"/>
            </xsl:element>
          </xsl:when>
          <xsl:otherwise>
            <response xsi:nil="true"/>
          </xsl:otherwise>
        </xsl:choose>
      </out2:helloWorldResponse>
    </body>
  </xsl:template>

  <!-- *****************    Utility Templates    ******************  -->
  <!-- copy the namespace declarations from the source to the target -->
  <xsl:template name="copyNamespaceDeclarations">
    <xsl:param name="root"/>
    <xsl:for-each select="$root/namespace::*[not(name() = '')]">
      <xsl:copy/>
    </xsl:for-each>
  </xsl:template>
</xsl:stylesheet>
